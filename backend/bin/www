#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tarjetas:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var schedule = require('node-schedule');
var mysql = require('mysql');
var mysqlDump = require('mysqldump')
var env = process.env.NODE_ENV || 'database',
  databaseConfig = require('./../config/' + env + '.js');

var pool = mysql.createPool({
  connectionLimit: 113,
  host: databaseConfig.host,
  user: databaseConfig.user,
  password: databaseConfig.password,
  database: databaseConfig.database,
  timezone: 'utc'
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTPSs server.
 */

var privateKey = fs.readFileSync('./certificados/key.key', 'utf8').toString();
var certificate = fs.readFileSync('./certificados/cert.crt', 'utf8').toString();
var ca1 = fs.readFileSync('./certificados/ca1.pem', 'utf8').toString();
var ca2 = fs.readFileSync('./certificados/ca2.pem', 'utf8').toString();
var certintermediate = fs.readFileSync('./certificados/caBundle.crt', 'utf8').toString();

var server2 = https.createServer({
  key: privateKey,
  cert: certificate,
  ca: certintermediate
}, app);

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server2.listen('443')
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

server.on('uncaughtException', function (req, res, route, err) {
  log.info('******* Begin Error *******\n%s\n*******\n%s\n******* End Error *******', route, err.stack);
  if (!res.headersSent) {
    return res.send(500, { ok: false });
  }
  res.write('\n');
  res.end();
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//evento automatico
// se ejecuta a las 6:00 am todos los dias
var j = schedule.scheduleJob('0 6 * * *', function () {
  // * * * * * *
  // ┬ ┬ ┬ ┬ ┬ ┬
  // │ │ │ │ │ |
  // │ │ │ │ │ └ day of week (0 - 7) (0 or 7 is Sun)
  // │ │ │ │ └───── month (1 - 12)
  // │ │ │ └────────── day of month (1 - 31)
  // │ │ └─────────────── hour (0 - 23)
  // │ └──────────────────── minute (0 - 59)
  // └───────────────────────── second (0 - 59, OPTIONAL)

  pool.query('call cambiar_estado_pago_operacion()', function (err, rows) {
    if (err) {
      console.log('cambiar estado operacion pendientes: ', err);
    } else console.log('cambiar estado operacion pendientes: ', rows[0]);
  });
});

var backupMysql = schedule.scheduleJob('0 0 * * 7 ', function () {
  //   * * * * * *
  //   ┬ ┬ ┬ ┬ ┬ ┬
  //   │ │ │ │ │ |
  //   │ │ │ │ │ └ day of week (0 - 7) (0 or 7 is Sun)
  //   │ │ │ │ └───── month (1 - 12)
  //   │ │ │ └────────── day of month (1 - 31)
  //   │ │ └─────────────── hour (0 - 23)
  //   │ └──────────────────── minute (0 - 59)
  //   └───────────────────────── second (0 - 59, OPTIONAL)
  var f = new Date();
  let dia = f.getDate();
  let mes = f.getMonth();
  mes = mes + 1;
  let anio = f.getFullYear();
  f = dia + '-' + mes + '-' + anio;
  mysqlDump({
    host: databaseConfig.host,
    user: databaseConfig.user,
    password: databaseConfig.password,
    database: databaseConfig.database,
    tables: ['Categorias'
      ,'Ciudades'
      ,'Clientes'
      ,'DiasHabiles'
      ,'Historial'
      ,'Operaciones'
      ,'Permisos'
      ,'Permisos_Roles'
      ,'Permisos_Temporarios'
      ,'Permisos_Usuarios'
      ,'Profesional_Categoria'
      ,'Profesionales'
      ,'ProfesionalesTemp'
      ,'Provincias'
      ,'Roles'
      ,'Tarjetas'
      ,'Tarjetas_Cuotas'
      ,'Usuarios'
      ,'Vendedores'], // only these tables
    // getDump: false,//BOOLEAN Return dump as a raw data on callback instead of create file Default: false;
    // where: {'players': 'id < 1000'}, // Only test players with id < 1000
    dest: `./+Backup/backup tablas ${f}.sql` // destination file 
  }, function (err) {
    if (err) console.log("error", err);
    else console.log("Dump correcto desde models");
  })
});
